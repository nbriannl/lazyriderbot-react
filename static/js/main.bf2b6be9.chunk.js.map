{"version":3,"sources":["components/MainDisplay/Platform.tsx","components/MainDisplay/PlatformIcons.tsx","components/MainDisplay/Train.tsx","components/MainDisplay/OtherTrain.tsx","components/MainDisplay/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PlatformFeature","IconElevator","IconEscalatorExit","className","IconEscalatorEntry","IconEscalatorInternalTransfer","IconStairs","IconStairsInternal","khatib","distFromHead","features","Stairs","EscalatorEntry","Elevator","EscalatorExit","Platform","isLandscape","direction","platformInfo","renderFeature","feature","index","EscalatorInternalTransfer","StairInternalTansfer","maxFeaturesForAnArea","Math","max","map","info","length","platformStyleValue","platformStyle","height","width","style","i","distFromHeadOriented","renderPlatformFeature","Train","numCarraiges","numDoors","bestDoorIndex","Array","carraige","door","j","isBestDoor","OtherTrain","text","sameDirection","sameDirectionArrow","oppDirectionArrow","MainDisplay","startStation","endStation","console","log","oreintedBestDoorIndex","stations","PickStartStation","startStationInput","setInputAndStation","list","name","id","placeholder","value","onChange","e","target","station","PickEndStation","endStationInput","App","useState","setStartStationInput","setStartStation","setEndStationInput","setEndStation","isMultiLocationMode","setIsMultiLocationMode","setDirection","setIsLandscape","setStation","setInputValue","includes","setStartInputAndStation","setEndInputAndStation","multiLocationIcon","singleLocationInput","onClick","multiLocationInput","prevStartInput","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bf2b6be9.chunk.js","sourcesContent":["import { ReactElement } from 'react';\nimport { IconElevator, IconEscalatorEntry, IconEscalatorExit, IconEscalatorInternalTransfer, IconStairs, IconStairsInternal } from './PlatformIcons';\n\ninterface Props {\n  isLandscape: boolean;\n  direction: boolean;\n}\n\n\nenum PlatformFeature {\n  Elevator,\n  EscalatorExit,\n  EscalatorEntry,\n  EscalatorInternalTransfer,\n  Stairs,\n  StairInternalTansfer\n}\n\ninterface PlatformFeatureInfo {\n  distFromHead: number;\n  features: Array<PlatformFeature>;\n}\n\nconst khatib: Array<PlatformFeatureInfo> = [\n  {\n    distFromHead: 20,\n    features: [\n      PlatformFeature.Stairs,\n      PlatformFeature.EscalatorEntry\n    ]\n  },\n  {\n    distFromHead: 50,\n    features: [\n      PlatformFeature.Elevator\n    ]\n  },\n  {\n    distFromHead: 80,\n    features: [\n      PlatformFeature.Stairs,\n      PlatformFeature.EscalatorExit\n    ]\n  }\n];\n\nconst Platform = ({ isLandscape, direction }: Props): ReactElement => {\n  const platformInfo = khatib;\n  const renderFeature = (feature: PlatformFeature, index: number): ReactElement => {\n    switch (feature) {\n      case PlatformFeature.Elevator:\n        return <IconElevator key={index} />;\n      case PlatformFeature.EscalatorExit:\n        return <IconEscalatorExit key={index} />;\n      case PlatformFeature.EscalatorEntry:\n        return <IconEscalatorEntry key={index} />;\n      case PlatformFeature.EscalatorInternalTransfer:\n        return <IconEscalatorInternalTransfer key={index} />;\n      case PlatformFeature.Stairs:\n        return <IconStairs key={index} />;\n      case PlatformFeature.StairInternalTansfer:\n        return <IconStairsInternal key={index} />;\n    }\n  };\n\n  const renderPlatformFeature = (feature: PlatformFeatureInfo, index: number): ReactElement => {\n    const { distFromHead, features } = feature;\n    const distFromHeadOriented = direction ? distFromHead : (100 - distFromHead);\n    return (\n      <div key={index} className={`platform-feature platform-feature-${distFromHeadOriented}`}>\n        {features.map(renderFeature)}\n      </div>\n    );\n  };\n\n  const maxFeaturesForAnArea = Math.max(...platformInfo.map(info => info.features.length));\n  const value = maxFeaturesForAnArea * 2 + 1;\n  const platformStyleValue = `${value}em`;\n  const platformStyle = isLandscape ? { height: platformStyleValue } : { width: platformStyleValue };\n  return (\n    <div className={`platform-info ${direction ? '' : 'flip'}`} style={platformStyle}>\n      {platformInfo.map((feature, i) => renderPlatformFeature(feature, i))}\n    </div>\n  );\n};\n\nexport default Platform;\n","import { GrEscalator, GrElevator, GrTrain } from 'react-icons/gr';\nimport { GiStairs } from 'react-icons/gi';\nimport { ReactElement } from 'react';\n\nexport const IconElevator = (): ReactElement => {\n  return <GrElevator />;\n};\n\nexport const IconEscalatorExit = (): ReactElement => {\n  return <GrEscalator className=\"escalator-exit-icon\" />;\n};\n\nexport const IconEscalatorEntry = (): ReactElement => {\n  return <GrEscalator className=\"escalator-entry-icon\" />;\n};\n\nexport const IconEscalatorInternalTransfer = (): ReactElement => {\n  return (\n    <>\n      <GrTrain className=\"train-transfer\" />\n      <GrEscalator className=\"escalator-internal-transfer\" />\n    </>\n  );\n};\n\nexport const IconStairs = (): ReactElement => {\n  return <GiStairs />;\n};\n\nexport const IconStairsInternal = (): ReactElement => {\n  return <GiStairs className=\"stairs-internal-transfer\" />;\n};\n","import { ReactElement } from 'react';\nimport { BsCaretLeftFill, BsFillCaretUpFill } from 'react-icons/bs';\n\ninterface Props {\n  isLandscape: boolean;\n  numCarraiges: number;\n  numDoors: number;\n  bestDoorIndex: number;\n}\n\nconst Train = ({ isLandscape, numCarraiges, numDoors, bestDoorIndex }: Props): ReactElement => {\n  return (\n    <div className=\"train-info\">\n      {\n        isLandscape ?\n          <BsCaretLeftFill className=\"direction-tri\" /> :\n          <BsFillCaretUpFill className=\"direction-tri\" />\n      }\n      <div className=\"train\">\n        {\n          [...Array(numCarraiges)].map((carraige, i) => {\n            return (\n              <div key={i} className=\"carraige\">{\n                [...Array(numDoors)].map((door, j) => {\n                  const isBestDoor = ((i) * numDoors + j) === bestDoorIndex;\n                  // 0-index\n                  return <div key={`${(i) * numDoors + j}`} className={`door ${isBestDoor ? 'best' : ''}`} />;\n                })\n              }\n              </div>\n            );\n          })\n        }\n      </div>\n    </div>\n  );\n};\n\nexport default Train;\n","import { ReactElement } from 'react';\nimport { BsFillCaretUpFill, BsFillCaretLeftFill, BsFillCaretRightFill, BsFillCaretDownFill } from 'react-icons/bs';\n\ninterface Props {\n  text: string;\n  isLandscape: boolean;\n  sameDirection: boolean;\n}\n\nconst OtherTrain = ({ text, isLandscape, sameDirection }: Props): ReactElement => {\n  const sameDirectionArrow = isLandscape ?\n    <BsFillCaretLeftFill className=\"direction-tri\" /> :\n    <BsFillCaretUpFill className=\"direction-tri\" />;\n  const oppDirectionArrow = isLandscape ?\n    <BsFillCaretRightFill className=\"direction-tri\" /> :\n    <BsFillCaretDownFill className=\"direction-tri\" />;\n  return (\n    <div className={`other-train-2 ${sameDirection ? 'same-direction' : 'other-direction'}`}>\n      {\n        sameDirection && sameDirectionArrow\n      }\n      <div className=\"other-train\">\n        <p>{text}</p>\n      </div>\n      {\n        !sameDirection && oppDirectionArrow\n      }\n    </div>\n  );\n};\n\nexport default OtherTrain;\n","import { BsTriangleFill } from 'react-icons/bs';\nimport { ReactElement } from 'react';\nimport Platform from './Platform';\nimport Train from './Train';\nimport OtherTrain from './OtherTrain';\n\ninterface Props {\n  isLandscape: boolean;\n  startStation: string;\n  endStation: string;\n  direction: boolean;\n}\n\nconst MainDisplay = ({ isLandscape, startStation, endStation, direction }: Props): ReactElement => {\n  console.log(startStation, endStation, direction);\n  const numCarraiges = 6;\n  const numDoors = 4;\n  const isDoorOpeningSameSide = true;\n  // 0-index\n  const bestDoorIndex = 18;\n  const oreintedBestDoorIndex = direction ? bestDoorIndex : (6 * 4) - bestDoorIndex - 1;\n\n  return (\n    <div className=\"main-display\">\n      <div className=\"med\">\n        <div className={`door-opening-info ${isDoorOpeningSameSide ? 'same-side' : 'other-side'}`}>\n          <BsTriangleFill />\n          <div className=\"door-opening-info-text\">\n            <p className=\"sub\">Doors opening:</p>\n            <p className=\"main\">{isDoorOpeningSameSide ? 'Same side' : 'Other side'}</p>\n          </div>\n          <BsTriangleFill />\n        </div>\n        <div className=\"door-number\">\n          <p className=\"sub\">Door</p>\n          <p className=\"main\">{oreintedBestDoorIndex + 1}</p>\n        </div>\n      </div>\n      <div className={`main-info ${isLandscape ? 'landscape' : 'portrait'}`}>\n        <OtherTrain\n          text={direction ? 'Train towards Marina Bay' : 'Train towards Jurong East'}\n          isLandscape={isLandscape}\n          sameDirection={false}\n        />\n        <Platform isLandscape={isLandscape} direction={direction} />\n        <Train\n          isLandscape={isLandscape}\n          numCarraiges={numCarraiges}\n          numDoors={numDoors}\n          bestDoorIndex={oreintedBestDoorIndex}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default MainDisplay;\n","import { Dispatch, ReactElement, SetStateAction, useState } from 'react';\nimport './styles/App.scss';\nimport { BsArrowDownShort } from 'react-icons/bs';\nimport { FcRotateToLandscape, FcRotateToPortrait } from 'react-icons/fc';\nimport { HiOutlineSwitchVertical, HiOutlineSwitchHorizontal } from 'react-icons/hi';\nimport { MdLocationOn } from 'react-icons/md';\nimport MainDisplay from './components/MainDisplay/index';\n\ninterface PickStartStationProps {\n  startStationInput: string;\n  setInputAndStation: (value: string) => void;\n}\n\nconst stations = ['Yishun', 'Sembawang', 'Canberra', 'Bishan', 'Orchard', 'Somerset'];\n\nconst PickStartStation = ({ startStationInput, setInputAndStation }: PickStartStationProps) => {\n  const renderOption = (station: string) => {\n    return <option key={station} value={station} />;\n  };\n\n  return (\n    <>\n      <input\n        list=\"start-station\" name=\"start-stations\" id=\"start-stations\"\n        placeholder=\"From\"\n        value={startStationInput}\n        onChange={e => {\n          setInputAndStation(e.target.value);\n        }}\n      />\n      <datalist id=\"start-station\">\n        {stations.map(renderOption)}\n      </datalist>\n    </>\n  );\n};\n\ninterface PickEndStationProps {\n  endStationInput: string;\n  setInputAndStation: (value: string) => void;\n  placeholder: string;\n}\n\nconst PickEndStation = ({ endStationInput, setInputAndStation, placeholder }: PickEndStationProps) => {\n  const renderOption = (station: string) => {\n    return <option key={station} value={station} />;\n  };\n\n  return (\n    <>\n      <input\n        list=\"end-station\" name=\"end-stations\" id=\"end-stations\"\n        placeholder={placeholder}\n        value={endStationInput}\n        onChange={e => {\n          setInputAndStation(e.target.value);\n        }}\n      />\n      <datalist id=\"end-station\">\n        {stations.map(renderOption)}\n      </datalist>\n    </>\n  );\n};\n\n\nconst App = (): ReactElement => {\n  const [startStationInput, setStartStationInput] = useState('');\n  const [startStation, setStartStation] = useState('');\n  const [endStationInput, setEndStationInput] = useState('');\n  const [endStation, setEndStation] = useState('');\n  const [isMultiLocationMode, setIsMultiLocationMode] = useState(true);\n  // true is heading to JE\n  const [direction, setDirection] = useState(true);\n  const [isLandscape, setIsLandscape] = useState(false);\n\n  const setInputAndStation = (\n    value: string,\n    setStation: Dispatch<SetStateAction<string>>,\n    setInputValue: Dispatch<SetStateAction<string>>\n  ) => {\n    setInputValue(value);\n    stations.includes(value) ? setStation(value) : setStation('');\n  };\n\n  const setStartInputAndStation = (value: string) => {\n    setInputAndStation(value, setStartStation, setStartStationInput);\n  };\n\n  const setEndInputAndStation = (value: string) => {\n    setInputAndStation(value, setEndStation, setEndStationInput);\n  };\n\n  const swapStations = () => {\n    const prevEndInput = endStationInput;\n    const prevStartInput = startStationInput;\n    setStartInputAndStation(prevEndInput);\n    setEndInputAndStation(prevStartInput);\n  };\n\n  const multiLocationIcon = (\n    <div className=\"multi-loc-icon\">\n      <MdLocationOn className=\"behind-icon\" />\n      <MdLocationOn className=\"overlap-icon\" />\n    </div>\n  );\n\n  const singleLocationInput = (\n    <div className=\"station-input\">\n      <div className=\"options\">\n        <PickEndStation\n          endStationInput={endStationInput}\n          setInputAndStation={setEndInputAndStation}\n          placeholder={'Destination'}\n        />\n        <p>Towards {direction ? 'Jurong East' : 'Marina South Pier'}</p>\n      </div>\n      <div\n        className=\"btn\" onClick={() => setDirection(!direction)}\n      >\n        <HiOutlineSwitchHorizontal />\n      </div>\n    </div>\n  );\n\n  const multiLocationInput = (\n    <div className=\"station-input\">\n      <div className=\"options\">\n        <PickStartStation\n          startStationInput={startStationInput}\n          setInputAndStation={setStartInputAndStation}\n        />\n        <BsArrowDownShort className=\"down-arrow\" />\n        <PickEndStation\n          endStationInput={endStationInput}\n          setInputAndStation={setEndInputAndStation}\n          placeholder={'To'}\n        />\n      </div>\n      <div\n        className=\"btn\" onClick={swapStations}\n      >\n        <HiOutlineSwitchVertical />\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"App\">\n      <div className=\"station-selector\">\n        <div\n          className={`btn column ${isMultiLocationMode ? 'multiloc' : 'singleloc'} `} onClick={() => setIsMultiLocationMode(!isMultiLocationMode)}\n        >\n          {multiLocationIcon}\n          <MdLocationOn className=\"single-loc-icon\" />\n        </div>\n        {isMultiLocationMode ? multiLocationInput : singleLocationInput}\n        <div className=\"btn\" onClick={() => setIsLandscape(!isLandscape)}>\n          {isLandscape ? <FcRotateToPortrait /> : <FcRotateToLandscape />}\n        </div>\n      </div>\n      <MainDisplay\n        isLandscape={isLandscape}\n        startStation={startStation}\n        endStation={endStation}\n        direction={direction}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}