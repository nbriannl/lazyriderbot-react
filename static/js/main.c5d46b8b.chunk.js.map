{"version":3,"sources":["components/MainDisplay/Platform.tsx","components/MainDisplay/PlatformIcons.tsx","components/MainDisplay/Train.tsx","components/MainDisplay/OtherTrain.tsx","components/MainDisplay/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PlatformFeature","IconElevator","IconEscalatorExit","className","IconEscalatorEntry","IconEscalatorInternalTransfer","IconStairs","IconStairsInternal","Platform","isLandscape","platformInfo","distFromHead","features","Stairs","EscalatorEntry","Elevator","EscalatorExit","renderFeature","feature","index","EscalatorInternalTransfer","StairInternalTansfer","maxFeaturesForAnArea","Math","max","map","info","length","platformStyleValue","platformStyle","height","width","style","i","styleValue","left","top","renderPlatformFeature","Train","numCarraiges","numDoors","bestDoorIndex","Array","carraige","door","j","isBestDoor","OtherTrain","terminus","MainDisplay","endStation","useState","setIsLandscape","onClick","PickStartStation","setStation","stations","list","name","id","onChange","e","includes","target","value","station","PickEndStation","App","startStation","setStartStation","setEndStation","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c5d46b8b.chunk.js","sourcesContent":["import { ReactElement } from 'react';\nimport { IconElevator, IconEscalatorEntry, IconEscalatorExit, IconEscalatorInternalTransfer, IconStairs, IconStairsInternal } from './PlatformIcons';\n\ninterface Props {\n  isLandscape: boolean;\n}\n\nenum PlatformFeature {\n  Elevator,\n  EscalatorExit,\n  EscalatorEntry,\n  EscalatorInternalTransfer,\n  Stairs,\n  StairInternalTansfer\n}\n\ninterface PlatformFeatureInfo {\n  distFromHead: number;\n  features: Array<PlatformFeature>;\n}\n\nconst Platform = ({ isLandscape }: Props): ReactElement => {\n  const platformInfo: Array<PlatformFeatureInfo> = [\n    {\n      distFromHead: 0.2,\n      features: [\n        PlatformFeature.Stairs,\n        PlatformFeature.EscalatorEntry\n      ]\n    },\n    {\n      distFromHead: 0.5,\n      features: [\n        PlatformFeature.Elevator\n      ]\n    },\n    {\n      distFromHead: 0.8,\n      features: [\n        PlatformFeature.Stairs,\n        PlatformFeature.EscalatorExit\n      ]\n    }\n  ];\n\n  const renderFeature = (feature: PlatformFeature, index: number): ReactElement => {\n    switch (feature) {\n      case PlatformFeature.Elevator:\n        return <IconElevator key={index} />;\n      case PlatformFeature.EscalatorExit:\n        return <IconEscalatorExit key={index} />;\n      case PlatformFeature.EscalatorEntry:\n        return <IconEscalatorEntry key={index} />;\n      case PlatformFeature.EscalatorInternalTransfer:\n        return <IconEscalatorInternalTransfer key={index} />;\n      case PlatformFeature.Stairs:\n        return <IconStairs key={index} />;\n      case PlatformFeature.StairInternalTansfer:\n        return <IconStairsInternal key={index} />;\n    }\n  };\n\n  const renderPlatformFeature = (feature: PlatformFeatureInfo, index: number): ReactElement => {\n    const { distFromHead, features } = feature;\n    const styleValue = `calc(${distFromHead} * (100% - 2em))`;\n    const style = isLandscape ? { left: styleValue } : { top: styleValue };\n    return (\n      <div key={index} style={style}>\n        {features.map(renderFeature)}\n      </div>\n    );\n  };\n\n  const maxFeaturesForAnArea = Math.max(...platformInfo.map(info => info.features.length));\n  const value = maxFeaturesForAnArea * 2 + 1;\n  const platformStyleValue = `${value}em`;\n  const platformStyle = isLandscape ? { height: platformStyleValue } : { width: platformStyleValue };\n  return (\n    <div className=\"platform-info\" style={platformStyle}>\n      {platformInfo.map((feature, i) => renderPlatformFeature(feature, i))}\n    </div>\n  );\n};\n\nexport default Platform;\n","import { GrEscalator, GrElevator, GrTrain } from 'react-icons/gr';\nimport { GiStairs } from 'react-icons/gi';\nimport { ReactElement } from 'react';\n\nexport const IconElevator = (): ReactElement => {\n  return <GrElevator />;\n};\n\nexport const IconEscalatorExit = (): ReactElement => {\n  return <GrEscalator className=\"escalator-exit-icon\" />;\n};\n\nexport const IconEscalatorEntry = (): ReactElement => {\n  return <GrEscalator className=\"escalator-entry-icon\" />;\n};\n\nexport const IconEscalatorInternalTransfer = (): ReactElement => {\n  return (\n    <>\n      <GrTrain className=\"train-transfer\" />\n      <GrEscalator className=\"escalator-internal-transfer\" />\n    </>\n  );\n};\n\nexport const IconStairs = (): ReactElement => {\n  return <GiStairs />;\n};\n\nexport const IconStairsInternal = (): ReactElement => {\n  return <GiStairs className=\"stairs-internal-transfer\" />;\n};\n","import { ReactElement } from 'react';\nimport { BsCaretLeftFill, BsFillCaretUpFill } from 'react-icons/bs';\n\ninterface Props {\n  isLandscape: boolean;\n  numCarraiges: number;\n  numDoors: number;\n  bestDoorIndex: number;\n}\n\nconst Train = ({ isLandscape, numCarraiges, numDoors, bestDoorIndex }: Props): ReactElement => {\n  return (\n    <div className=\"train-info\">\n      {\n        isLandscape ?\n          <BsCaretLeftFill className=\"direction-tri\" /> :\n          <BsFillCaretUpFill className=\"direction-tri\" />\n      }\n      <div className=\"train\">\n        {\n          [...Array(numCarraiges)].map((carraige, i) => {\n            return (\n              <div key={i} className=\"carraige\">{\n                [...Array(numDoors)].map((door, j) => {\n                  const isBestDoor = ((i) * numDoors + j) === bestDoorIndex;\n                  // 0-index\n                  return <div key={`${(i) * numDoors + j}`} className={`door ${isBestDoor ? 'best' : ''}`} />;\n                })\n              }\n              </div>\n            );\n          })\n        }\n      </div>\n    </div>\n  );\n};\n\nexport default Train;\n","import { ReactElement } from 'react';\n\ninterface Props {\n  terminus: string;\n}\n\nconst OtherTrain = ({ terminus }: Props): ReactElement => {\n  return (\n    <div className=\"other-train\">\n      <p>Train towards {terminus}</p>\n    </div>\n  );\n};\n\nexport default OtherTrain;\n","import { BsTriangleFill } from 'react-icons/bs';\nimport { FcRotateToLandscape, FcRotateToPortrait } from 'react-icons/fc';\nimport { useState, ReactElement } from 'react';\nimport Platform from './Platform';\nimport Train from './Train';\nimport OtherTrain from './OtherTrain';\n\ninterface Props {\n  startStation: string;\n  endStation: string;\n}\n\nconst MainDisplay = ({ endStation }: Props): ReactElement => {\n  const numCarraiges = 6;\n  const numDoors = 4;\n  const isDoorOpeningSameSide = true;\n  // 0-index\n  const bestDoorIndex = 19;\n\n  const [isLandscape, setIsLandscape] = useState(true);\n\n  return (\n    <div className=\"main-display\">\n      <div className=\"top\">\n        <p className=\"station-info\">This station:<span className=\"station-name\"> {endStation}</span></p>\n        <div className=\"rotate-btn\" onClick={() => setIsLandscape(!isLandscape)}>\n          {isLandscape ? <FcRotateToPortrait /> : <FcRotateToLandscape />}\n        </div>\n      </div>\n      <div className=\"med\">\n        <div className={`door-opening-info ${isDoorOpeningSameSide ? 'same-side' : 'other-side'}`}>\n          <BsTriangleFill />\n          <div className=\"door-opening-info-text\">\n            <p className=\"sub\">Doors opening:</p>\n            <p className=\"main\">{isDoorOpeningSameSide ? 'Same side' : 'Other side'}</p>\n          </div>\n          <BsTriangleFill />\n        </div>\n        <div className=\"door-number\">\n          <p className=\"sub\">Door</p>\n          <p className=\"main\">{bestDoorIndex + 1}</p>\n        </div>\n      </div>\n      <div className={`main-info ${isLandscape ? 'landscape' : 'portrait'}`}>\n        <OtherTrain terminus={'Marina Bay'} />\n        <Platform isLandscape={isLandscape} />\n        <Train\n          isLandscape={isLandscape}\n          numCarraiges={numCarraiges}\n          numDoors={numDoors}\n          bestDoorIndex={bestDoorIndex}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default MainDisplay;\n","import { Dispatch, ReactElement, SetStateAction, useState } from 'react';\nimport './styles/App.scss';\nimport MainDisplay from './components/MainDisplay/index';\n\ninterface PickStartStationProps {\n  setStation: Dispatch<SetStateAction<string>>;\n}\n\nconst PickStartStation = ({ setStation }: PickStartStationProps) => {\n  const stations = ['Bishan', 'Orchard', 'Somerset'];\n\n  const renderOption = (station: string) => {\n    return <option key={station} value={station} />;\n  };\n\n  return (\n    <>\n      <input\n        list=\"start-station\" name=\"start-stations\" id=\"start-stations\"\n        onChange={e => {\n          if (stations.includes(e.target.value)) {\n            setStation(e.target.value);\n          }\n        }}\n      />\n      <datalist id=\"start-station\">\n        {stations.map(renderOption)}\n      </datalist>\n    </>\n  );\n};\n\ninterface PickEndStationProps {\n  setStation: Dispatch<SetStateAction<string>>;\n}\n\nconst PickEndStation = ({ setStation }: PickEndStationProps) => {\n  const stations = ['Yishun', 'Sembawang', 'Canberra'];\n\n  const renderOption = (station: string) => {\n    return <option key={station} value={station} />;\n  };\n\n  return (\n    <>\n      <input\n        list=\"end-station\" name=\"end-stations\" id=\"end-stations\"\n        onChange={e => {\n          if (stations.includes(e.target.value)) {\n            setStation(e.target.value);\n          }\n        }}\n      />\n      <datalist id=\"end-station\">\n        {stations.map(renderOption)}\n      </datalist>\n    </>\n  );\n};\n\n\nconst App = (): ReactElement => {\n  const [startStation, setStartStation] = useState('Station');\n  const [endStation, setEndStation] = useState('Khatib');\n\n  return (\n    <div className=\"App\">\n      <div className=\"station-selector\">\n        <PickStartStation setStation={setStartStation} />\n        <PickEndStation setStation={setEndStation} />\n      </div>\n      <MainDisplay startStation={startStation} endStation={endStation} />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}